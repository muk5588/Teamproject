<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="inquiry.dao.InquiryDao">

<!-- <sql id="search">
	<if test="search != null">
		AND search Like #{search}
	</if>
</sql> -->

	<sql id="search">
        <if test="search != null and search != ''">
            AND INQUIRYDETAIL LIKE '%' || #{search} || '%'
        </if>
    </sql>

    <!-- 특정 닉네임을 가진 사용자 수를 반환하는 쿼리 -->
    <select id="userCntByNickName" resultType="int" parameterType="String">
        SELECT count(*) FROM userTB
        WHERE nickname = #{touser}
    </select>

    <!-- 특정 닉네임을 가진 사용자 정보를 반환하는 쿼리 -->
    <select id="getUserByNickName" resultType="User" parameterType="String">
        SELECT * FROM userTB
        WHERE nickname = #{touser}
    </select>

    <!-- 문의를 삽입하는 쿼리 -->
   <insert id="insertInquiry" parameterType="dto.Inquiry">
    <selectKey keyProperty="inquiryNo" order="BEFORE" resultType="int">
        SELECT INQUIRY_SEQ.nextval FROM dual
    </selectKey>
    	INSERT INTO inquiry(inquiryNo, userNo, inquiryDetail, managerNo, complete, inquiryDate)
    	VALUES(#{inquiryNo}, #{userNo}, #{inquiryDetail}, #{managerNo}, 'N', SYSDATE)
	</insert>

    <!-- 특정 사용자 번호에 해당하는 문의 목록을 반환하는 쿼리 -->
    <select id="getListByUserno" parameterType="int" resultType="dto.Inquiry">
        SELECT * FROM inquiry
        WHERE userNo = #{userNo}
        ORDER BY inquiryDate DESC 
    </select>

    <!-- 문의 번호에 해당하는 문의를 삭제하는 쿼리 -->
    <delete id="deleteByInquiryNo" parameterType="int">
        DELETE FROM inquiry
        WHERE inquiryNo = #{inquiryNo}
    </delete>

    <!-- 문의 답변을 업데이트하는 쿼리 -->
    <update id="answerUpdateByAnswer" parameterType="dto.Inquiry">
        UPDATE inquiry
        SET answer = #{answer}
        WHERE inquiryNo = #{inquiryNo}
    </update>

    <!-- 특정 보낸 사용자 번호에 해당하는 문의 목록을 반환하는 쿼리 -->
    <select id="getListBySendUser" parameterType="int" resultType="dto.Inquiry">
        SELECT u.nickname AS sender, m.INQUIRYNO, m.USERNO, m.MANAGERNO, m.INQUIRYDETAIL, m.INQUIRYDATE, m.ANSWER, m.COMPLETE, m.ANSWERDATE  	
        FROM 
            usertb u
            INNER JOIN inquiry m ON u.USERNO = m.USERNO
        WHERE m.USERNO = #{userNo} 
        ORDER BY m.INQUIRYDATE DESC
    </select>

    <!-- 모든 문의 목록을 반환하는 쿼리 -->
    <!-- <select id="getAllInquiries" resultType="dto.Inquiry" parameterType="util.Paging">
        select * from (
        	select rownum rnum, i.* from(
		       SELECT u.nickname AS sender, m.INQUIRYNO, m.USERNO, m.MANAGERNO, m.INQUIRYDETAIL, m.INQUIRYDATE, m.ANSWER, m.COMPLETE, m.ANSWERDATE  	
		       FROM 
		           usertb u
		           INNER JOIN inquiry m ON u.USERNO = m.USERNO
		       ORDER BY m.INQUIRYDATE DESC
		   ) i
        )
        <where>
			 <include refid="search"/>
			 AND rnum BETWEEN #{startNo } AND #{endNo}
        </where>
    </select> -->

<select id="getAllInquiries" resultType="dto.Inquiry" parameterType="util.Paging">
        SELECT * FROM (
            SELECT rownum rnum, i.* FROM (
                SELECT u.nickname AS sender, m.INQUIRYNO, m.USERNO, m.MANAGERNO, m.INQUIRYDETAIL, m.INQUIRYDATE, m.ANSWER, m.COMPLETE, m.ANSWERDATE  	
                FROM usertb u
                INNER JOIN inquiry m ON u.USERNO = m.USERNO
                <where>
                    <include refid="search"/>
                </where>
                ORDER BY m.INQUIRYDATE DESC
            ) i
        )
        WHERE rnum BETWEEN #{startNo } AND #{endNo}
    </select>

    <!-- 특정 매니저 번호에 해당하는 문의 목록을 반환하는 쿼리 -->
    <select id="getListByManagerNo" parameterType="int" resultType="dto.Inquiry">
        SELECT * FROM inquiry
        WHERE managerNo = #{managerNo}
        ORDER BY inquiryDate DESC
    </select>

    <!-- 문의 상태를 'Y'로 업데이트하는 쿼리 -->
    <update id="updateCompleteToY" parameterType="int">
        UPDATE inquiry
        SET complete = 'Y'
        WHERE inquiryNo = #{inquiryNo}
    </update>

    <!-- 문의 정보를 업데이트하는 쿼리 -->
    <update id="updateInquiry" parameterType="dto.Inquiry">
    	UPDATE inquiry
    	SET
        	answer = #{answer},
        	complete = #{complete},
        	answerDate = #{answerDate}
    	WHERE inquiryNo = #{inquiryNo}
	</update>
	
	<!-- 관리자 문의 페이지를 페이징하는 쿼리 -->
	<select id="getCount" resultType="int" parameterType="util.Paging">
		select count(*) from(
			SELECT inquiryNo, userNo FROM Inquiry
			<where>
				<include refid="search"/>
			</where>
		)
	</select>
	
	
</mapper>
